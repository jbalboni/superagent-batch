{"version":3,"sources":["superagent-batch.min.js","/source/superagent-batch.js","/source/src/superagent-batch.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_get","_x","_x2","_x3","_again","object","property","receiver","desc","parent","getter","undefined","Function","getOwnPropertyDescriptor","get","call","getPrototypeOf","global","factory","exports","module","require","define","amd","superagentBatch","url","this","boundaryString","boundarySeparator","newLine","httpVersion","contentType","parseUrl","urlString","parse","buildRequest","req","serialize","body","_parseUrl","pathname","host","query","_query","length","join","push","method","window","location","keys","header","forEach","_data","createBatchingAgent","superagent","containerRequest","batches","BatchingAgent","_superagent","apply","arguments","oldEnd","Request","end","endBatch","callback","_this","console","log","requests","map","send","err","res","_callback","startBatch","set","superagent_batch"],"mappings":"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","file":"superagent-batch.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('url')) :\n  typeof define === 'function' && define.amd ? define(['url'], factory) :\n  global.superagentBatch = factory(global.url)\n}(this, function (url) { 'use strict';\n\n  const boundaryString = '1439751438138';\n  const boundarySeparator = '--';\n  const newLine = '\\r\\n';\n  const httpVersion = 'HTTP/1.1';\n  const contentType = 'Content-Type';\n\n  const parseUrl = function(urlString) {\n    return url.parse(urlString);\n  };\n\n  const buildRequest = (req, serialize) => {\n    let body = [];\n    const {pathname, host} = parseUrl(req.url);\n    const query = req._query.length ? `?${req._query.join('&')}` : '';\n    body.push(boundarySeparator + boundaryString);\n    body.push('Content-Type: application/http; msgtype=request');\n    body.push('');\n    body.push(`${req.method} ${pathname}${query} ${httpVersion}`);\n    if (host === null && !window) {\n      throw ('Couldn\\'t determine host name for batched request');\n    }\n    body.push(`Host: ${host || window.location.host}`);\n    Object.keys(req.header).forEach((header) => body.push(`${header}: ${req.header[header]}`));\n    body.push('');\n    if (req._data) {\n      if (req.header[contentType] && serialize[req.header[contentType]]) {\n        body.push(serialize[req.header[contentType]](req._data))\n      } else {\n        body.push(serialize(req._data));\n      }\n    }\n    body.push('');\n    return body.join(newLine);\n  };\n\n  const createBatchingAgent = function(superagent, containerRequest) {\n    let batches = [];\n\n    class BatchingAgent extends superagent {\n    }\n\n    let oldEnd = BatchingAgent.Request.prototype.end;\n    BatchingAgent.endBatch = function(callback) {\n      BatchingAgent.Request.prototype.end = oldEnd;\n      console.log(batches);\n\n      let requests = batches.map((req) => buildRequest(req, this.serialize));\n      requests.push(boundarySeparator + boundaryString + boundarySeparator);\n\n      console.log(requests);\n      containerRequest.send(requests.join(newLine));\n      containerRequest.end((err, res) => {\n        //callback(err, res);\n      });\n    };\n    BatchingAgent.Request.prototype.end = function end(callback) {\n      this._callback = callback;\n      batches.push(this);\n      return BatchingAgent;\n    };\n    return BatchingAgent;\n  };\n\n  const superagentBatch = function(superagent) {\n    superagent.Request.prototype.startBatch = function() {\n      this.set('Content-Type', `multipart/mixed; boundary=${boundaryString}`);\n      return createBatchingAgent(superagent, this);\n    };\n    return superagent;\n  };\n\n  var superagent_batch = superagentBatch;\n\n  return superagent_batch;\n\n}));\n","import url from 'url';\n\nconst boundaryString = '1439751438138';\nconst boundarySeparator = '--';\nconst newLine = '\\r\\n';\nconst httpVersion = 'HTTP/1.1';\nconst contentType = 'Content-Type';\n\nconst parseUrl = function(urlString) {\n  return url.parse(urlString);\n};\n\nconst buildRequest = (req, serialize) => {\n  let body = [];\n  const {pathname, host} = parseUrl(req.url);\n  const query = req._query.length ? `?${req._query.join('&')}` : '';\n  body.push(boundarySeparator + boundaryString);\n  body.push('Content-Type: application/http; msgtype=request');\n  body.push('');\n  body.push(`${req.method} ${pathname}${query} ${httpVersion}`);\n  if (host === null && !window) {\n    throw ('Couldn\\'t determine host name for batched request');\n  }\n  body.push(`Host: ${host || window.location.host}`);\n  Object.keys(req.header).forEach((header) => body.push(`${header}: ${req.header[header]}`));\n  body.push('');\n  if (req._data) {\n    if (req.header[contentType] && serialize[req.header[contentType]]) {\n      body.push(serialize[req.header[contentType]](req._data))\n    } else {\n      body.push(serialize(req._data));\n    }\n  }\n  body.push('');\n  return body.join(newLine);\n};\n\nconst createBatchingAgent = function(superagent, containerRequest) {\n  let batches = [];\n\n  class BatchingAgent extends superagent {\n  }\n\n  let oldEnd = BatchingAgent.Request.prototype.end;\n  BatchingAgent.endBatch = function(callback) {\n    BatchingAgent.Request.prototype.end = oldEnd;\n    console.log(batches);\n\n    let requests = batches.map((req) => buildRequest(req, this.serialize));\n    requests.push(boundarySeparator + boundaryString + boundarySeparator);\n\n    console.log(requests);\n    containerRequest.send(requests.join(newLine));\n    containerRequest.end((err, res) => {\n      //callback(err, res);\n    });\n  };\n  BatchingAgent.Request.prototype.end = function end(callback) {\n    this._callback = callback;\n    batches.push(this);\n    return BatchingAgent;\n  };\n  return BatchingAgent;\n};\n\nconst superagentBatch = function(superagent) {\n  superagent.Request.prototype.startBatch = function() {\n    this.set('Content-Type', `multipart/mixed; boundary=${boundaryString}`);\n    return createBatchingAgent(superagent, this);\n  };\n  return superagent;\n};\n\nexport default superagentBatch;\n"],"sourceRoot":"/source/"}