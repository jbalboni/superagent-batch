{"version":3,"sources":["superagent-batch.js","src/constants.js","src/batch-response.js","src/batched-response-parser.js","src/batching-agent.js","src/superagent-batch.js"],"names":[],"mappings":"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","file":"superagent-batch.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('url'), require('superagent')) :\n  typeof define === 'function' && define.amd ? define(['url', 'superagent'], factory) :\n  global.superagentBatch = factory(global.url, global.request)\n}(this, function (url, request) { 'use strict';\n\n  const boundaryString = '1439751438138';\n  const boundarySeparator = '--';\n  const newLine = '\\r\\n';\n  const httpVersion = 'HTTP/1.1';\n  const contentType = 'Content-Type';\n\n  function BatchResponse(req, parsedResponse) {\n    this.req = req;\n    this.text = parsedResponse.body;\n    this.statusText = parsedResponse.statusMessage;\n    this.setStatusProperties(parseInt(parsedResponse.status));\n    this.header = this.headers = parsedResponse.headers;\n    this.setHeaderProperties(this.header);\n    this.body = this.req.method != 'HEAD' ? this.parseBody(this.text) : null;\n  }\n\n  BatchResponse.prototype = request.Response.prototype;\n\n  function parseResponse(response) {\n    let parsedResponse = {};\n    let resp = response.replace(new RegExp('[^]*?' + httpVersion), httpVersion);\n    let respLines = resp.split(newLine);\n    let [version, status, ...message] = respLines.shift().split(' ');\n    parsedResponse.status = status;\n    parsedResponse.statusMessage = message.join(' ');\n    parsedResponse.headers = {};\n\n    while (respLines[0] !== '') {\n      let [name, content] = respLines.shift().split(': ');\n      parsedResponse.headers[name.toLowerCase()] = content;\n    }\n\n    respLines.shift();\n    parsedResponse.body = respLines.shift();\n    return parsedResponse;\n  }\n\n  var parseBatchedResponse = parseBatchedResponse = (batches, res) => {\n    let separator = '--' + /boundary=\"(.*)\"/.exec(res.header[contentType.toLowerCase()])[1];\n    let responses = res.text.split(separator).filter((resp) => resp.replace(newLine, '') !== boundarySeparator && resp.replace(newLine, '').length);\n\n    let superagentResponses = responses.map((resp, i) => {\n      let parsedResponse = parseResponse(resp);\n      return new BatchResponse(batches[i], parsedResponse);\n    });\n\n    return superagentResponses;\n  };\n\n  function buildRequest(req) {\n    let body = [];\n    const {pathname, host} = url.parse(req.url);\n    const query = req._query.length ? `?${req._query.join('&')}` : '';\n\n    body.push(boundarySeparator + boundaryString);\n    body.push('Content-Type: application/http; msgtype=request');\n\n    body.push('');\n\n    body.push(`${req.method} ${pathname}${query} ${httpVersion}`);\n\n    if (host === null && !window) {\n      throw ('Couldn\\'t determine host name for batched request');\n    }\n\n    body.push(`Host: ${host || window.location.host}`);\n\n    Object.keys(req.header).forEach((header) => body.push(`${header}: ${req.header[header]}`));\n\n    body.push('');\n\n    if (req._serializedData) {\n      body.push(req._serializedData);\n    }\n\n    body.push('');\n\n    return body.join(newLine);\n  }\n\n  function createBatchingAgent(containerRequest) {\n    let batches = [];\n\n    class BatchingAgent extends request {}\n\n    let oldEnd = BatchingAgent.Request.prototype.end;\n    BatchingAgent.endBatch = function(callback) {\n      BatchingAgent.Request.prototype.end = oldEnd;\n\n      let requests = batches.map((req) => buildRequest(req));\n      requests.push(boundarySeparator + boundaryString + boundarySeparator);\n\n      containerRequest.send(requests.join(newLine));\n      containerRequest.end((err, res) => {\n        let responses = parseBatchedResponse(batches, res);\n        responses.forEach((resp) => {\n          if (resp.req._callback) {\n            resp.req._callback(resp.toError(), resp);\n          }\n        });\n\n        if (callback) {\n          callback(err, res);\n        }\n      });\n    };\n\n    BatchingAgent.Request.prototype.end = function end(callback) {\n      if (this._data) {\n        let serializer = BatchingAgent.serialize[this.header[contentType]];\n        if (this.header[contentType] && serializer) {\n          this._serializedData = serializer(this._data);\n        } else {\n          this._serializedData = this._data;\n        }\n      }\n\n      this._callback = callback;\n      batches.push(this);\n      return BatchingAgent;\n    };\n\n    return BatchingAgent;\n  }\n\n  const superagentBatch = function(superagent) {\n    superagent.Request.prototype.startBatch = function() {\n      this.set(contentType, `multipart/mixed; boundary=${boundaryString}`);\n      return createBatchingAgent(this);\n    };\n\n    return superagent;\n  };\n\n  var superagent_batch = superagentBatch;\n\n  return superagent_batch;\n\n}));\n","export const boundaryString = '1439751438138';\nexport const boundarySeparator = '--';\nexport const newLine = '\\r\\n';\nexport const httpVersion = 'HTTP/1.1';\nexport const contentType = 'Content-Type';\n","import request from 'superagent';\n\nexport default function BatchResponse(req, parsedResponse) {\n  this.req = req;\n  this.text = parsedResponse.body;\n  this.statusText = parsedResponse.statusMessage;\n  this.setStatusProperties(parseInt(parsedResponse.status));\n  this.header = this.headers = parsedResponse.headers;\n  this.setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD' ? this.parseBody(this.text) : null;\n}\n\nBatchResponse.prototype = request.Response.prototype;\n","import {boundarySeparator, contentType, newLine, httpVersion} from './constants';\nimport BatchResponse from './batch-response.js';\n\nfunction parseResponse(response) {\n  let parsedResponse = {};\n  let resp = response.replace(new RegExp('[^]*?' + httpVersion), httpVersion);\n  let respLines = resp.split(newLine);\n  let [version, status, ...message] = respLines.shift().split(' ');\n  parsedResponse.status = status;\n  parsedResponse.statusMessage = message.join(' ');\n  parsedResponse.headers = {};\n\n  while (respLines[0] !== '') {\n    let [name, content] = respLines.shift().split(': ');\n    parsedResponse.headers[name.toLowerCase()] = content;\n  }\n\n  respLines.shift();\n  parsedResponse.body = respLines.shift();\n  return parsedResponse;\n}\n\nexport default parseBatchedResponse = (batches, res) => {\n  let separator = '--' + /boundary=\"(.*)\"/.exec(res.header[contentType.toLowerCase()])[1];\n  let responses = res.text.split(separator).filter((resp) => resp.replace(newLine, '') !== boundarySeparator && resp.replace(newLine, '').length);\n\n  let superagentResponses = responses.map((resp, i) => {\n    let parsedResponse = parseResponse(resp);\n    return new BatchResponse(batches[i], parsedResponse);\n  });\n\n  return superagentResponses;\n};\n","import url from 'url';\nimport {boundarySeparator, boundaryString, contentType, newLine, httpVersion} from './constants';\nimport parseBatchedResponse from 'batched-response-parser.js';\nimport request from 'superagent';\n\nfunction buildRequest(req) {\n  let body = [];\n  const {pathname, host} = url.parse(req.url);\n  const query = req._query.length ? `?${req._query.join('&')}` : '';\n\n  body.push(boundarySeparator + boundaryString);\n  body.push('Content-Type: application/http; msgtype=request');\n\n  body.push('');\n\n  body.push(`${req.method} ${pathname}${query} ${httpVersion}`);\n\n  if (host === null && !window) {\n    throw ('Couldn\\'t determine host name for batched request');\n  }\n\n  body.push(`Host: ${host || window.location.host}`);\n\n  Object.keys(req.header).forEach((header) => body.push(`${header}: ${req.header[header]}`));\n\n  body.push('');\n\n  if (req._serializedData) {\n    body.push(req._serializedData);\n  }\n\n  body.push('');\n\n  return body.join(newLine);\n}\n\nexport default function createBatchingAgent(containerRequest) {\n  let batches = [];\n\n  class BatchingAgent extends request {}\n\n  let oldEnd = BatchingAgent.Request.prototype.end;\n  BatchingAgent.endBatch = function(callback) {\n    BatchingAgent.Request.prototype.end = oldEnd;\n\n    let requests = batches.map((req) => buildRequest(req));\n    requests.push(boundarySeparator + boundaryString + boundarySeparator);\n\n    containerRequest.send(requests.join(newLine));\n    containerRequest.end((err, res) => {\n      let responses = parseBatchedResponse(batches, res);\n      responses.forEach((resp) => {\n        if (resp.req._callback) {\n          resp.req._callback(resp.toError(), resp);\n        }\n      });\n\n      if (callback) {\n        callback(err, res);\n      }\n    });\n  };\n\n  BatchingAgent.Request.prototype.end = function end(callback) {\n    if (this._data) {\n      let serializer = BatchingAgent.serialize[this.header[contentType]];\n      if (this.header[contentType] && serializer) {\n        this._serializedData = serializer(this._data);\n      } else {\n        this._serializedData = this._data;\n      }\n    }\n\n    this._callback = callback;\n    batches.push(this);\n    return BatchingAgent;\n  };\n\n  return BatchingAgent;\n}\n","import createBatchingAgent from './batching-agent';\nimport {boundaryString, contentType} from './constants.js';\n\nconst superagentBatch = function(superagent) {\n  superagent.Request.prototype.startBatch = function() {\n    this.set(contentType, `multipart/mixed; boundary=${boundaryString}`);\n    return createBatchingAgent(this);\n  };\n\n  return superagent;\n};\n\nexport default superagentBatch;\n"],"sourceRoot":"/source/"}