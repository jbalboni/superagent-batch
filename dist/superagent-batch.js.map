{"version":3,"sources":["superagent-batch.js","src/superagent-batch.js"],"names":[],"mappings":"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","file":"superagent-batch.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('url')) :\n  typeof define === 'function' && define.amd ? define(['url'], factory) :\n  global.superagentBatch = factory(global.url)\n}(this, function (url) { 'use strict';\n\n  const boundaryString = '1439751438138';\n  const boundarySeparator = '--';\n  const newLine = '\\r\\n';\n  const httpVersion = 'HTTP/1.1';\n  const contentType = 'Content-Type';\n\n  const parseUrl = function(urlString) {\n    return url.parse(urlString);\n  };\n\n  const buildRequest = (req, serialize) => {\n    let body = [];\n    const {pathname, host} = parseUrl(req.url);\n    const query = req._query.length ? `?${req._query.join('&')}` : '';\n    body.push(boundarySeparator + boundaryString);\n    body.push('Content-Type: application/http; msgtype=request');\n    body.push('');\n    body.push(`${req.method} ${pathname}${query} ${httpVersion}`);\n    if (host === null && !window) {\n      throw ('Couldn\\'t determine host name for batched request');\n    }\n    body.push(`Host: ${host || window.location.host}`);\n    Object.keys(req.header).forEach((header) => body.push(`${header}: ${req.header[header]}`));\n    body.push('');\n    if (req._data) {\n      if (req.header[contentType] && serialize[req.header[contentType]]) {\n        body.push(serialize[req.header[contentType]](req._data))\n      } else {\n        body.push(serialize(req._data));\n      }\n    }\n    body.push('');\n    return body.join(newLine);\n  };\n\n  const createBatchingAgent = function(superagent, containerRequest) {\n    let batches = [];\n\n    class BatchingAgent extends superagent {\n    }\n\n    let oldEnd = BatchingAgent.Request.prototype.end;\n    BatchingAgent.endBatch = function(callback) {\n      BatchingAgent.Request.prototype.end = oldEnd;\n      console.log(batches);\n\n      let requests = batches.map((req) => buildRequest(req, this.serialize));\n      requests.push(boundarySeparator + boundaryString + boundarySeparator);\n\n      console.log(requests);\n      containerRequest.send(requests.join(newLine));\n      containerRequest.end((err, res) => {\n        //callback(err, res);\n      });\n    };\n    BatchingAgent.Request.prototype.end = function end(callback) {\n      this._callback = callback;\n      batches.push(this);\n      return BatchingAgent;\n    };\n    return BatchingAgent;\n  };\n\n  const superagentBatch = function(superagent) {\n    superagent.Request.prototype.startBatch = function() {\n      this.set('Content-Type', `multipart/mixed; boundary=${boundaryString}`);\n      return createBatchingAgent(superagent, this);\n    };\n    return superagent;\n  };\n\n  var superagent_batch = superagentBatch;\n\n  return superagent_batch;\n\n}));\n","import url from 'url';\n\nconst boundaryString = '1439751438138';\nconst boundarySeparator = '--';\nconst newLine = '\\r\\n';\nconst httpVersion = 'HTTP/1.1';\nconst contentType = 'Content-Type';\n\nconst parseUrl = function(urlString) {\n  return url.parse(urlString);\n};\n\nconst buildRequest = (req, serialize) => {\n  let body = [];\n  const {pathname, host} = parseUrl(req.url);\n  const query = req._query.length ? `?${req._query.join('&')}` : '';\n  body.push(boundarySeparator + boundaryString);\n  body.push('Content-Type: application/http; msgtype=request');\n  body.push('');\n  body.push(`${req.method} ${pathname}${query} ${httpVersion}`);\n  if (host === null && !window) {\n    throw ('Couldn\\'t determine host name for batched request');\n  }\n  body.push(`Host: ${host || window.location.host}`);\n  Object.keys(req.header).forEach((header) => body.push(`${header}: ${req.header[header]}`));\n  body.push('');\n  if (req._data) {\n    if (req.header[contentType] && serialize[req.header[contentType]]) {\n      body.push(serialize[req.header[contentType]](req._data))\n    } else {\n      body.push(serialize(req._data));\n    }\n  }\n  body.push('');\n  return body.join(newLine);\n};\n\nconst createBatchingAgent = function(superagent, containerRequest) {\n  let batches = [];\n\n  class BatchingAgent extends superagent {\n  }\n\n  let oldEnd = BatchingAgent.Request.prototype.end;\n  BatchingAgent.endBatch = function(callback) {\n    BatchingAgent.Request.prototype.end = oldEnd;\n    console.log(batches);\n\n    let requests = batches.map((req) => buildRequest(req, this.serialize));\n    requests.push(boundarySeparator + boundaryString + boundarySeparator);\n\n    console.log(requests);\n    containerRequest.send(requests.join(newLine));\n    containerRequest.end((err, res) => {\n      //callback(err, res);\n    });\n  };\n  BatchingAgent.Request.prototype.end = function end(callback) {\n    this._callback = callback;\n    batches.push(this);\n    return BatchingAgent;\n  };\n  return BatchingAgent;\n};\n\nconst superagentBatch = function(superagent) {\n  superagent.Request.prototype.startBatch = function() {\n    this.set('Content-Type', `multipart/mixed; boundary=${boundaryString}`);\n    return createBatchingAgent(superagent, this);\n  };\n  return superagent;\n};\n\nexport default superagentBatch;\n"],"sourceRoot":"/source/"}